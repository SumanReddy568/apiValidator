{
    "sourceFile": "js/ui/filterModal.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1747663200388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747663211806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,400 +0,0 @@\n-import { showNotification } from '../utils/notifications.js';\n-import { formatResponse } from './formatToggle.js';\n-import { syntaxHighlight } from '../utils/formatting.js';\n-import { getNestedValue } from '../utils/objectUtils.js';\n-\n-// Store the current data and filters\n-let currentData = null;\n-let activeFilters = [];\n-\n-/**\n- * Initialize the filter modal\n- */\n-export function initFilterModal() {\n-    // Create filter button event handler\n-    const filterBtn = document.getElementById('show-filter-btn');\n-    if (filterBtn) {\n-        filterBtn.addEventListener('click', showFilterModal);\n-    }\n-\n-    // Create modal close handler\n-    document.getElementById('close-filter-modal')?.addEventListener('click', hideFilterModal);\n-    document.getElementById('filter-modal-overlay')?.addEventListener('click', (e) => {\n-        if (e.target.id === 'filter-modal-overlay') {\n-            hideFilterModal();\n-        }\n-    });\n-\n-    // Apply filter button\n-    document.getElementById('apply-filter-btn')?.addEventListener('click', () => {\n-        applySelectedFilter();\n-    });\n-\n-    // Clear filters button\n-    document.getElementById('clear-filters-btn')?.addEventListener('click', () => {\n-        clearAllFilters();\n-    });\n-}\n-\n-/**\n- * Show the filter modal\n- */\n-function showFilterModal() {\n-    const modal = document.getElementById('filter-modal-overlay');\n-    if (modal) {\n-        modal.classList.add('visible');\n-        populateFilterFields();\n-    }\n-}\n-\n-/**\n- * Hide the filter modal\n- */\n-function hideFilterModal() {\n-    const modal = document.getElementById('filter-modal-overlay');\n-    if (modal) {\n-        modal.classList.remove('visible');\n-    }\n-}\n-\n-/**\n- * Populate filter fields based on the current response data\n- */\n-function populateFilterFields() {\n-    const fieldSelect = document.getElementById('filter-field-select');\n-    if (!fieldSelect || !currentData) return;\n-\n-    // Clear existing options\n-    fieldSelect.innerHTML = '<option value=\"\">Select a field</option>';\n-\n-    // Extract fields from the data\n-    const fields = extractFields(currentData);\n-\n-    // Add options\n-    fields.forEach(field => {\n-        const option = document.createElement('option');\n-        option.value = field.path;\n-        option.textContent = field.label;\n-        fieldSelect.appendChild(option);\n-    });\n-\n-    // Set up field change handler\n-    fieldSelect.onchange = function () {\n-        const path = this.value;\n-        if (!path) return;\n-\n-        updateOperatorAndValueOptions(path);\n-    };\n-}\n-\n-/**\n- * Extract fields from data for filtering\n- */\n-function extractFields(data, prefix = '', result = []) {\n-    if (!data) return result;\n-\n-    if (Array.isArray(data)) {\n-        if (data.length > 0 && typeof data[0] === 'object') {\n-            // For arrays of objects, extract fields from the first item\n-            extractFields(data[0], prefix ? `${prefix}[0]` : '[0]', result);\n-        }\n-        return result;\n-    }\n-\n-    if (typeof data === 'object' && data !== null) {\n-        Object.keys(data).forEach(key => {\n-            const path = prefix ? `${prefix}.${key}` : key;\n-            const label = prefix ? `${prefix}.${key}` : key;\n-\n-            result.push({ path, label });\n-\n-            // Recursively extract nested fields\n-            if (typeof data[key] === 'object' && data[key] !== null) {\n-                extractFields(data[key], path, result);\n-            }\n-        });\n-    }\n-\n-    return result;\n-}\n-\n-/**\n- * Update operator and value options based on the selected field\n- */\n-function updateOperatorAndValueOptions(path) {\n-    const valueInput = document.getElementById('filter-value-input');\n-    if (!valueInput) return;\n-\n-    // Get the value type from the data\n-    const value = getNestedValue(currentData, path);\n-    const valueType = typeof value;\n-\n-    // Update input type based on value type\n-    if (valueType === 'number') {\n-        valueInput.type = 'number';\n-        valueInput.placeholder = 'Enter a number...';\n-    } else if (valueType === 'boolean') {\n-        valueInput.type = 'text';\n-        valueInput.placeholder = 'true or false';\n-    } else {\n-        valueInput.type = 'text';\n-        valueInput.placeholder = 'Enter value...';\n-    }\n-\n-    // If array item values, show possible values\n-    if (Array.isArray(currentData)) {\n-        const uniqueValues = new Set();\n-        currentData.forEach(item => {\n-            const itemPath = path.replace('[0]', '');\n-            const itemValue = getNestedValue(item, itemPath);\n-            if (itemValue !== undefined) {\n-                uniqueValues.add(String(itemValue));\n-            }\n-        });\n-\n-        if (uniqueValues.size > 0 && uniqueValues.size < 15) {\n-            const datalist = document.getElementById('filter-value-list');\n-            if (datalist) {\n-                datalist.innerHTML = '';\n-                uniqueValues.forEach(value => {\n-                    const option = document.createElement('option');\n-                    option.value = value;\n-                    datalist.appendChild(option);\n-                });\n-                valueInput.setAttribute('list', 'filter-value-list');\n-            }\n-        } else {\n-            valueInput.removeAttribute('list');\n-        }\n-    }\n-}\n-\n-/**\n- * Apply the selected filter\n- */\n-function applySelectedFilter() {\n-    const fieldSelect = document.getElementById('filter-field-select');\n-    const operatorSelect = document.getElementById('filter-operator-select');\n-    const valueInput = document.getElementById('filter-value-input');\n-\n-    if (!fieldSelect || !operatorSelect || !valueInput) return;\n-\n-    const field = fieldSelect.value;\n-    const operator = operatorSelect.value;\n-    const value = valueInput.value;\n-\n-    if (!field || !operator) {\n-        showNotification('Please select a field and operator', 'warning');\n-        return;\n-    }\n-\n-    // Add the filter\n-    const fieldLabel = fieldSelect.options[fieldSelect.selectedIndex].textContent;\n-    addFilter(field, fieldLabel, operator, value);\n-\n-    // Hide the modal\n-    hideFilterModal();\n-\n-    // Apply all filters\n-    applyAllFilters();\n-}\n-\n-/**\n- * Add a filter to the active filters\n- */\n-function addFilter(field, label, operator, value) {\n-    // Add to active filters array\n-    activeFilters.push({\n-        field,\n-        label,\n-        operator,\n-        value\n-    });\n-\n-    // Add to UI\n-    updateActiveFiltersUI();\n-}\n-\n-/**\n- * Update the active filters UI\n- */\n-function updateActiveFiltersUI() {\n-    const container = document.getElementById('active-filters-container');\n-    if (!container) return;\n-\n-    // Clear existing\n-    container.innerHTML = '';\n-\n-    // Add each filter\n-    activeFilters.forEach((filter, index) => {\n-        const tag = document.createElement('div');\n-        tag.className = 'filter-tag';\n-\n-        let operatorSymbol = '=';\n-        if (filter.operator === 'not_equal') operatorSymbol = '≠';\n-        else if (filter.operator === 'contains') operatorSymbol = 'contains';\n-        else if (filter.operator === 'greater') operatorSymbol = '>';\n-        else if (filter.operator === 'less') operatorSymbol = '<';\n-\n-        tag.innerHTML = `\n-            <span class=\"filter-field\">${filter.label}</span>\n-            <span class=\"filter-operator\">${operatorSymbol}</span>\n-            <span class=\"filter-value\">${filter.value}</span>\n-            <span class=\"remove-filter\" data-index=\"${index}\">×</span>\n-        `;\n-\n-        container.appendChild(tag);\n-    });\n-\n-    // Add click handlers to remove buttons\n-    document.querySelectorAll('.remove-filter').forEach(btn => {\n-        btn.addEventListener('click', function () {\n-            const index = parseInt(this.dataset.index);\n-            activeFilters.splice(index, 1);\n-            updateActiveFiltersUI();\n-            applyAllFilters();\n-        });\n-    });\n-\n-    // Show/hide clear button based on filters\n-    const clearBtn = document.getElementById('clear-filters-btn');\n-    if (clearBtn) {\n-        clearBtn.style.display = activeFilters.length ? 'block' : 'none';\n-    }\n-}\n-\n-/**\n- * Clear all active filters\n- */\n-function clearAllFilters() {\n-    activeFilters = [];\n-    updateActiveFiltersUI();\n-    applyAllFilters();\n-}\n-\n-/**\n- * Apply all active filters to the data\n- */\n-function applyAllFilters() {\n-    if (!currentData || activeFilters.length === 0) {\n-        // If no filters, show original data\n-        displayFilteredData(currentData);\n-        return;\n-    }\n-\n-    let filteredData;\n-\n-    if (Array.isArray(currentData)) {\n-        // Filter array items\n-        filteredData = currentData.filter(item => {\n-            return activeFilters.every(filter => {\n-                const fieldPath = filter.field.replace('[0]', '');\n-                const itemValue = getNestedValue(item, fieldPath);\n-\n-                if (itemValue === undefined) return false;\n-\n-                switch (filter.operator) {\n-                    case 'equal':\n-                        return String(itemValue) === filter.value;\n-                    case 'not_equal':\n-                        return String(itemValue) !== filter.value;\n-                    case 'contains':\n-                        return String(itemValue).includes(filter.value);\n-                    case 'greater':\n-                        return Number(itemValue) > Number(filter.value);\n-                    case 'less':\n-                        return Number(itemValue) < Number(filter.value);\n-                    default:\n-                        return true;\n-                }\n-            });\n-        });\n-    } else if (typeof currentData === 'object' && currentData !== null) {\n-        // Clone the data\n-        filteredData = JSON.parse(JSON.stringify(currentData));\n-\n-        // For each filter, find arrays in the data and filter them\n-        activeFilters.forEach(filter => {\n-            const pathParts = filter.field.split('.');\n-            let current = filteredData;\n-            let pathSoFar = '';\n-\n-            // Traverse the path to find arrays\n-            for (let i = 0; i < pathParts.length; i++) {\n-                const part = pathParts[i];\n-\n-                if (part.includes('[') && part.endsWith(']')) {\n-                    // This is an array path\n-                    const arrayName = part.substring(0, part.indexOf('['));\n-\n-                    if (arrayName && current[arrayName] && Array.isArray(current[arrayName])) {\n-                        // Filter this array\n-                        const remainingPath = pathParts.slice(i + 1).join('.');\n-\n-                        current[arrayName] = current[arrayName].filter(item => {\n-                            const itemValue = remainingPath ?\n-                                getNestedValue(item, remainingPath) : item;\n-\n-                            if (itemValue === undefined) return false;\n-\n-                            switch (filter.operator) {\n-                                case 'equal':\n-                                    return String(itemValue) === filter.value;\n-                                case 'not_equal':\n-                                    return String(itemValue) !== filter.value;\n-                                case 'contains':\n-                                    return String(itemValue).includes(filter.value);\n-                                case 'greater':\n-                                    return Number(itemValue) > Number(filter.value);\n-                                case 'less':\n-                                    return Number(itemValue) < Number(filter.value);\n-                                default:\n-                                    return true;\n-                            }\n-                        });\n-                        break;\n-                    }\n-                }\n-\n-                if (current[part] === undefined) break;\n-                current = current[part];\n-                pathSoFar += (pathSoFar ? '.' : '') + part;\n-            }\n-        });\n-    }\n-\n-    // Display the filtered data\n-    displayFilteredData(filteredData);\n-}\n-\n-/**\n- * Display filtered data in the response area\n- */\n-function displayFilteredData(data) {\n-    const responseData = document.getElementById('response-data');\n-    if (!responseData) return;\n-\n-    if (!data) {\n-        responseData.textContent = 'No data matches your filters';\n-        return;\n-    }\n-\n-    responseData.innerHTML = syntaxHighlight(JSON.stringify(data, null, 2));\n-}\n-\n-/**\n- * Set the current data for filtering\n- */\n-export function setFilterData(data) {\n-    currentData = data;\n-\n-    // Reset active filters when data changes\n-    activeFilters = [];\n-    updateActiveFiltersUI();\n-\n-    // Enable filter button if data is available\n-    const filterBtn = document.getElementById('show-filter-btn');\n-    if (filterBtn) {\n-        filterBtn.disabled = !data;\n-    }\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747663227297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +0,0 @@\n-\n\\ No newline at end of file\n"
                }
            ],
            "date": 1747663200388,
            "name": "Commit-0",
            "content": "import { showNotification } from '../utils/notifications.js';\nimport { formatResponse } from './formatToggle.js';\nimport { syntaxHighlight } from '../utils/formatting.js';\nimport { getNestedValue } from '../utils/objectUtils.js';\n\n// Store the current data and filters\nlet currentData = null;\nlet activeFilters = [];\n\n/**\n * Initialize the filter modal\n */\nexport function initFilterModal() {\n    // Create filter button event handler\n    const filterBtn = document.getElementById('show-filter-btn');\n    if (filterBtn) {\n        filterBtn.addEventListener('click', showFilterModal);\n    }\n\n    // Create modal close handler\n    document.getElementById('close-filter-modal')?.addEventListener('click', hideFilterModal);\n    document.getElementById('filter-modal-overlay')?.addEventListener('click', (e) => {\n        if (e.target.id === 'filter-modal-overlay') {\n            hideFilterModal();\n        }\n    });\n\n    // Apply filter button\n    document.getElementById('apply-filter-btn')?.addEventListener('click', () => {\n        applySelectedFilter();\n    });\n\n    // Clear filters button\n    document.getElementById('clear-filters-btn')?.addEventListener('click', () => {\n        clearAllFilters();\n    });\n}\n\n/**\n * Show the filter modal\n */\nfunction showFilterModal() {\n    const modal = document.getElementById('filter-modal-overlay');\n    if (modal) {\n        modal.classList.add('visible');\n        populateFilterFields();\n    }\n}\n\n/**\n * Hide the filter modal\n */\nfunction hideFilterModal() {\n    const modal = document.getElementById('filter-modal-overlay');\n    if (modal) {\n        modal.classList.remove('visible');\n    }\n}\n\n/**\n * Populate filter fields based on the current response data\n */\nfunction populateFilterFields() {\n    const fieldSelect = document.getElementById('filter-field-select');\n    if (!fieldSelect || !currentData) return;\n\n    // Clear existing options\n    fieldSelect.innerHTML = '<option value=\"\">Select a field</option>';\n\n    // Extract fields from the data\n    const fields = extractFields(currentData);\n\n    // Add options\n    fields.forEach(field => {\n        const option = document.createElement('option');\n        option.value = field.path;\n        option.textContent = field.label;\n        fieldSelect.appendChild(option);\n    });\n\n    // Set up field change handler\n    fieldSelect.onchange = function () {\n        const path = this.value;\n        if (!path) return;\n\n        updateOperatorAndValueOptions(path);\n    };\n}\n\n/**\n * Extract fields from data for filtering\n */\nfunction extractFields(data, prefix = '', result = []) {\n    if (!data) return result;\n\n    if (Array.isArray(data)) {\n        if (data.length > 0 && typeof data[0] === 'object') {\n            // For arrays of objects, extract fields from the first item\n            extractFields(data[0], prefix ? `${prefix}[0]` : '[0]', result);\n        }\n        return result;\n    }\n\n    if (typeof data === 'object' && data !== null) {\n        Object.keys(data).forEach(key => {\n            const path = prefix ? `${prefix}.${key}` : key;\n            const label = prefix ? `${prefix}.${key}` : key;\n\n            result.push({ path, label });\n\n            // Recursively extract nested fields\n            if (typeof data[key] === 'object' && data[key] !== null) {\n                extractFields(data[key], path, result);\n            }\n        });\n    }\n\n    return result;\n}\n\n/**\n * Update operator and value options based on the selected field\n */\nfunction updateOperatorAndValueOptions(path) {\n    const valueInput = document.getElementById('filter-value-input');\n    if (!valueInput) return;\n\n    // Get the value type from the data\n    const value = getNestedValue(currentData, path);\n    const valueType = typeof value;\n\n    // Update input type based on value type\n    if (valueType === 'number') {\n        valueInput.type = 'number';\n        valueInput.placeholder = 'Enter a number...';\n    } else if (valueType === 'boolean') {\n        valueInput.type = 'text';\n        valueInput.placeholder = 'true or false';\n    } else {\n        valueInput.type = 'text';\n        valueInput.placeholder = 'Enter value...';\n    }\n\n    // If array item values, show possible values\n    if (Array.isArray(currentData)) {\n        const uniqueValues = new Set();\n        currentData.forEach(item => {\n            const itemPath = path.replace('[0]', '');\n            const itemValue = getNestedValue(item, itemPath);\n            if (itemValue !== undefined) {\n                uniqueValues.add(String(itemValue));\n            }\n        });\n\n        if (uniqueValues.size > 0 && uniqueValues.size < 15) {\n            const datalist = document.getElementById('filter-value-list');\n            if (datalist) {\n                datalist.innerHTML = '';\n                uniqueValues.forEach(value => {\n                    const option = document.createElement('option');\n                    option.value = value;\n                    datalist.appendChild(option);\n                });\n                valueInput.setAttribute('list', 'filter-value-list');\n            }\n        } else {\n            valueInput.removeAttribute('list');\n        }\n    }\n}\n\n/**\n * Apply the selected filter\n */\nfunction applySelectedFilter() {\n    const fieldSelect = document.getElementById('filter-field-select');\n    const operatorSelect = document.getElementById('filter-operator-select');\n    const valueInput = document.getElementById('filter-value-input');\n\n    if (!fieldSelect || !operatorSelect || !valueInput) return;\n\n    const field = fieldSelect.value;\n    const operator = operatorSelect.value;\n    const value = valueInput.value;\n\n    if (!field || !operator) {\n        showNotification('Please select a field and operator', 'warning');\n        return;\n    }\n\n    // Add the filter\n    const fieldLabel = fieldSelect.options[fieldSelect.selectedIndex].textContent;\n    addFilter(field, fieldLabel, operator, value);\n\n    // Hide the modal\n    hideFilterModal();\n\n    // Apply all filters\n    applyAllFilters();\n}\n\n/**\n * Add a filter to the active filters\n */\nfunction addFilter(field, label, operator, value) {\n    // Add to active filters array\n    activeFilters.push({\n        field,\n        label,\n        operator,\n        value\n    });\n\n    // Add to UI\n    updateActiveFiltersUI();\n}\n\n/**\n * Update the active filters UI\n */\nfunction updateActiveFiltersUI() {\n    const container = document.getElementById('active-filters-container');\n    if (!container) return;\n\n    // Clear existing\n    container.innerHTML = '';\n\n    // Add each filter\n    activeFilters.forEach((filter, index) => {\n        const tag = document.createElement('div');\n        tag.className = 'filter-tag';\n\n        let operatorSymbol = '=';\n        if (filter.operator === 'not_equal') operatorSymbol = '≠';\n        else if (filter.operator === 'contains') operatorSymbol = 'contains';\n        else if (filter.operator === 'greater') operatorSymbol = '>';\n        else if (filter.operator === 'less') operatorSymbol = '<';\n\n        tag.innerHTML = `\n            <span class=\"filter-field\">${filter.label}</span>\n            <span class=\"filter-operator\">${operatorSymbol}</span>\n            <span class=\"filter-value\">${filter.value}</span>\n            <span class=\"remove-filter\" data-index=\"${index}\">×</span>\n        `;\n\n        container.appendChild(tag);\n    });\n\n    // Add click handlers to remove buttons\n    document.querySelectorAll('.remove-filter').forEach(btn => {\n        btn.addEventListener('click', function () {\n            const index = parseInt(this.dataset.index);\n            activeFilters.splice(index, 1);\n            updateActiveFiltersUI();\n            applyAllFilters();\n        });\n    });\n\n    // Show/hide clear button based on filters\n    const clearBtn = document.getElementById('clear-filters-btn');\n    if (clearBtn) {\n        clearBtn.style.display = activeFilters.length ? 'block' : 'none';\n    }\n}\n\n/**\n * Clear all active filters\n */\nfunction clearAllFilters() {\n    activeFilters = [];\n    updateActiveFiltersUI();\n    applyAllFilters();\n}\n\n/**\n * Apply all active filters to the data\n */\nfunction applyAllFilters() {\n    if (!currentData || activeFilters.length === 0) {\n        // If no filters, show original data\n        displayFilteredData(currentData);\n        return;\n    }\n\n    let filteredData;\n\n    if (Array.isArray(currentData)) {\n        // Filter array items\n        filteredData = currentData.filter(item => {\n            return activeFilters.every(filter => {\n                const fieldPath = filter.field.replace('[0]', '');\n                const itemValue = getNestedValue(item, fieldPath);\n\n                if (itemValue === undefined) return false;\n\n                switch (filter.operator) {\n                    case 'equal':\n                        return String(itemValue) === filter.value;\n                    case 'not_equal':\n                        return String(itemValue) !== filter.value;\n                    case 'contains':\n                        return String(itemValue).includes(filter.value);\n                    case 'greater':\n                        return Number(itemValue) > Number(filter.value);\n                    case 'less':\n                        return Number(itemValue) < Number(filter.value);\n                    default:\n                        return true;\n                }\n            });\n        });\n    } else if (typeof currentData === 'object' && currentData !== null) {\n        // Clone the data\n        filteredData = JSON.parse(JSON.stringify(currentData));\n\n        // For each filter, find arrays in the data and filter them\n        activeFilters.forEach(filter => {\n            const pathParts = filter.field.split('.');\n            let current = filteredData;\n            let pathSoFar = '';\n\n            // Traverse the path to find arrays\n            for (let i = 0; i < pathParts.length; i++) {\n                const part = pathParts[i];\n\n                if (part.includes('[') && part.endsWith(']')) {\n                    // This is an array path\n                    const arrayName = part.substring(0, part.indexOf('['));\n\n                    if (arrayName && current[arrayName] && Array.isArray(current[arrayName])) {\n                        // Filter this array\n                        const remainingPath = pathParts.slice(i + 1).join('.');\n\n                        current[arrayName] = current[arrayName].filter(item => {\n                            const itemValue = remainingPath ?\n                                getNestedValue(item, remainingPath) : item;\n\n                            if (itemValue === undefined) return false;\n\n                            switch (filter.operator) {\n                                case 'equal':\n                                    return String(itemValue) === filter.value;\n                                case 'not_equal':\n                                    return String(itemValue) !== filter.value;\n                                case 'contains':\n                                    return String(itemValue).includes(filter.value);\n                                case 'greater':\n                                    return Number(itemValue) > Number(filter.value);\n                                case 'less':\n                                    return Number(itemValue) < Number(filter.value);\n                                default:\n                                    return true;\n                            }\n                        });\n                        break;\n                    }\n                }\n\n                if (current[part] === undefined) break;\n                current = current[part];\n                pathSoFar += (pathSoFar ? '.' : '') + part;\n            }\n        });\n    }\n\n    // Display the filtered data\n    displayFilteredData(filteredData);\n}\n\n/**\n * Display filtered data in the response area\n */\nfunction displayFilteredData(data) {\n    const responseData = document.getElementById('response-data');\n    if (!responseData) return;\n\n    if (!data) {\n        responseData.textContent = 'No data matches your filters';\n        return;\n    }\n\n    responseData.innerHTML = syntaxHighlight(JSON.stringify(data, null, 2));\n}\n\n/**\n * Set the current data for filtering\n */\nexport function setFilterData(data) {\n    currentData = data;\n\n    // Reset active filters when data changes\n    activeFilters = [];\n    updateActiveFiltersUI();\n\n    // Enable filter button if data is available\n    const filterBtn = document.getElementById('show-filter-btn');\n    if (filterBtn) {\n        filterBtn.disabled = !data;\n    }\n}\n"
        }
    ]
}